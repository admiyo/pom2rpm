These are my notes for determinging the true dependencies for hibernate tools.

I used the build_jar_cahce script to ccreate a file /tmp/jarcache.txt

To determine what classes were called by the hibernate-tools section of the ant task, I created a simple ant build file that just called that task.  (Listed at the end)

Then I ran:

LD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/demo/jvmti/mtrace/lib  \
ANT_OPTS=" -Xbootclasspath/a:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/demo/jvmti/mtrace/mtrace.jar -agentlib:mtrace=\"max=100000\" " \
./ant | grep ^Class  | cut -d' ' -f 2  \
> /tmp/hibernate-tools-called-classes.txt 2>&1


To generate the list of the classes actually called from ant.

In order to speed up processing, I created a temp file containing all of the java files from the hibernate tools source:

find hibernate-tools-3.2.4.GA/ -name \*.java > /tmp/hibernate-tools-java-files.txt


To pull those files out of the source I ran:


for class in $(cat /tmp/hibernate-tools-called-classes.txt )  ; do for java in $(grep -e "hibernate-tools-3.2.4.GA/.*/src/java/"$class /tmp/hibernate-tools-java-files.txt) ; do  short=$( echo $java | sed 's!hibernate-tools-3.2.4.GA/.*/src/java/!!' ) ;    mkdir -p /tmp/hibernate-tools/hibernate-tools-needed-classes/$(dirname $short ) ;   cp /tmp/hibernate-tools/$java /tmp/hibernate-tools/hibernate-tools-needed-classes/$(dirname $short)  ; done   ; done



pushd /tmp/hibernate-tools/hibernate-tools-needed-classes
mkdir ../classes

This line compiles all java files in the directory, and graps the output, looking for lines that start with "import".  It uses these lines to pull in additional files from the source tree.


for class in $( javac -cp ../classes:. -d ../classes $( find org/ -name "*.java" ) 2>&1 | grep "^import " | sed -e 's!^import !!' -e 's!;!!' ) ;  do for java in $(grep -e "hibernate-tools-3.2.4.GA/.*/src/java/"$class /tmp/hibernate-tools-java-files.txt) ; do  short=$( echo $java | sed 's!hibernate-tools-3.2.4.GA/.*/src/java/!!' ) ;    mkdir -p /tmp/hibernate-tools/hibernate-tools-needed-classes/$(dirname $short ) ;   cp /tmp/hibernate-tools/$java /tmp/hibernate-tools/hibernate-tools-needed-classes/$(dirname $short)  ; done   ; done




This line tells how many dep classes are missing.  Once you run it twice in succeession, you know that you have everything you can get from the source tree.

javac -cp ../classes:. -d ../classes $( find org/ -name "*.java" ) 2>&1 | grep "^import " | sed -e 's!^import !!' -e 's!;!!' | wc -l




Now I want to generate the jar file list I need in order to compile:


for class in $( javac -cp ../classes:. -d ../classes $( find org/ -name "*.java" ) 2>&1 | grep "^import " | sed -e 's!^import !!' -e 's!;!!'  -e 's!\.!/!g' ) ; do grep $class /tmp/jarcache.txt | cut -d' ' -f 2 ; done  | sort -u


I keep selecting the shortes jar file name from the list, under the ssumption that I want "THe latest and greatest"

Eventually I get

for class in $( javac -cp .:/usr/share/java/commons-logging.jar:/usr/share/java/freemarker.jar:/usr/share/java/hibernate-core.jar:/usr/share/java/jakarta-commons-logging.jar:/usr/share/java/jakarta-commons-logging-jboss.jar:/usr/share/java/slf4j/jcl-over-slf4j.jar:/usr/share/java/jpa_api.jar:/usr/share/java/persistence-api.jar:/usr/share/java/javassist.jar:/usr/share/java/hibernate3-ejb-persistence-3.0-api.jar:/usr/share/java/ant.jar:/usr/share/java/jboss-common-core.jar:/usr/share/java/hibernate-annotations.jar:/usr/share/java/hibernate3-annotations.jar:/usr/share/java/dom4j.jar -d ../classes $( find org/ -name "*.java" ) 2>&1 | grep "^import " | sed -e 's!^import !!' -e 's!;!!'  -e 's!\.!/!g' ) ; do grep $class /tmp/jarcache.txt | cut -d' ' -f 2 ; done  | sort -u

Which returns no lines.


Doesn't mean it built cleanly.  Running without the filter show problems. It looks like more files are needed from the hibernate-tools dir, so I run the copy command again, this time with the classpath extended to the jar files.


for class in $( javac -cp .:/usr/share/java/commons-logging.jar:/usr/share/java/freemarker.jar:/usr/share/java/hibernate-core.jar:/usr/share/java/jakarta-commons-logging.jar:/usr/share/java/jakarta-commons-logging-jboss.jar:/usr/share/java/slf4j/jcl-over-slf4j.jar:/usr/share/java/jpa_api.jar:/usr/share/java/persistence-api.jar:/usr/share/java/javassist.jar:/usr/share/java/hibernate3-ejb-persistence-3.0-api.jar:/usr/share/java/ant.jar:/usr/share/java/jboss-common-core.jar:/usr/share/java/hibernate-annotations.jar:/usr/share/java/hibernate3-annotations.jar:/usr/share/java/dom4j.jar -d ../classes $( find org/ -name "*.java" ) 2>&1 | grep "^import " | sed -e 's!^import !!' -e 's!;!!' ) ;  do for java in $(grep -e "hibernate-tools-3.2.4.GA/.*/src/java/"$class /tmp/hibernate-tools-java-files.txt) ; do  short=$( echo $java | sed 's!hibernate-tools-3.2.4.GA/.*/src/java/!!' ) ;    mkdir -p /tmp/hibernate-tools/hibernate-tools-needed-classes/$(dirname $short ) ;   cp /tmp/hibernate-tools/$java /tmp/hibernate-tools/hibernate-tools-needed-classes/$(dirname $short)  ; done   ; done



Now I bounce back and forth between the one that copies over the files and one that just shows which files are needed from hibernate-tools until I get no more classes required from there.


Run the one that pulls the imports out of jarcache:


eventuall I get a classpath that looks like this:

export JAVAC_CP=.:/usr/share/java/commons-logging.jar:/usr/share/java/freemarker.jar:/usr/share/java/hibernate-core.jar:/usr/share/java/jakarta-commons-logging.jar:/usr/share/java/jakarta-commons-logging-jboss.jar:/usr/share/java/slf4j/jcl-over-slf4j.jar:/usr/share/java/jpa_api.jar:/usr/share/java/persistence-api.jar:/usr/share/java/javassist.jar:/usr/share/java/hibernate3-ejb-persistence-3.0-api.jar:/usr/share/java/ant.jar:/usr/share/java/jboss-common-core.jar:/usr/share/java/hibernate-annotations.jar:/usr/share/java/hibernate3-annotations.jar:/usr/share/java/dom4j.jar:/usr/share/java/cglib.jar:/usr/share/java/commons-collections.jar

Now I can run 

javac -cp $JAVAC_CP -d ../classes $( find org/ -name "*.java" ) 2>&1 | grep symbol


To find classes that are package level and not included


Simple build.xml


<project name="name of project" default="tool" basedir=".">

 <property name="repo"      value="/home/ayoung/.m2/repository"/>


 <path id="toolslib">
   <pathelement location="${repo}/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA.jar"/>
   <pathelement location="${repo}/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA.jar"/>
   <pathelement location="${repo}/org/hibernate/hibernate-commons-annotations/3.3.0.ga/hibernate-commons-annotations-3.3.0.ga.jar"/>
   <pathelement location="${repo}/org/hibernate/hibernate-entitymanager/3.4.0.GA/hibernate-entitymanager-3.4.0.GA.jar"/>
   <pathelement location="${repo}/org/hibernate/hibernate-tools/3.2.4.GA/hibernate-tools-3.2.4.GA.jar"/>
   <pathelement location="${repo}/org/hibernate/hibernate-validator/3.1.0.GA/hibernate-validator-3.1.0.GA.jar"/>
   <pathelement location="${repo}/antlr/antlr/2.7.6/antlr-2.7.6.jar"/>
   <pathelement location="${repo}/asm/asm/3.0/asm-3.0.jar"/>
   <pathelement location="${repo}/cglib/cglib/2.2/cglib-2.2.jar"/>
   <pathelement location="${repo}/javassist/javassist/3.9.0.GA/javassist-3.9.0.GA.jar"/>
   <pathelement location="${repo}/javax/transaction/jta/1.1/jta-1.1.jar"/>
   <pathelement location="${repo}/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8.jar"/>
   <pathelement location="${repo}/org/slf4j/slf4j-log4j12/1.4.2/slf4j-log4j12-1.4.2.jar"/>
   <pathelement location="${repo}/org/freemarker/freemarker/2.3.15/freemarker-2.3.15.jar"/>
   <pathelement location="${repo}/hsqldb/hsqldb/1.8.0.10/hsqldb-1.8.0.10.jar"/>
   <pathelement location="${repo}/postgresql/postgresql/8.4-701.jdbc4/postgresql-8.4-701.jdbc4.jar"/>
   <pathelement location="${repo}/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar"/>
   <pathelement location="${repo}/commons-codec/commons-codec/1.4/commons-codec-1.4.jar"/>
   <pathelement location="${repo}/commons-cli/commons-cli/1.2/commons-cli-1.2.jar"/>
   <pathelement location="${repo}/commons-pool/commons-pool/1.2/commons-pool-1.2.jar"/>
   <pathelement location="${repo}/commons-dbcp/commons-dbcp/1.2.1/commons-dbcp-1.2.1.jar"/>
   <pathelement location="${repo}/commons-collections/commons-collections/3.1/commons-collections-3.1.jar"/>
   <pathelement location="${repo}/commons-io/commons-io/1.3.2/commons-io-1.3.2.jar"/>
   <pathelement location="${repo}/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar"/>
   <pathelement location="${repo}/log4j/log4j/1.2.14/log4j-1.2.14.jar"/>
   <pathelement location="${repo}/jdom/jdom/1.0/jdom-1.0.jar"/>
   <pathelement location="${repo}/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar"/>
   <pathelement location="${repo}/org/jboss/resteasy/jaxrs-api/1.2.1.GA/jaxrs-api-1.2.1.GA.jar"/>
   <pathelement location="${repo}/org/jboss/resteasy/resteasy-jaxrs/1.2.1.GA/resteasy-jaxrs-1.2.1.GA.jar"/>
   <pathelement location="${repo}/org/jboss/resteasy/resteasy-jaxb-provider/1.2.1.GA/resteasy-jaxb-provider-1.2.1.GA.jar"/>
   <pathelement location="${repo}/org/jboss/resteasy/resteasy-jettison-provider/1.2.1.GA/resteasy-jettison-provider-1.2.1.GA.jar"/>
   <pathelement location="${repo}/org/jboss/resteasy/resteasy-guice/1.2.1.GA/resteasy-guice-1.2.1.GA.jar"/>
   <pathelement location="${repo}/javax/persistence/persistence-api/1.0/persistence-api-1.0.jar"/>
   <pathelement location="${repo}/xalan/xalan/2.6.0/xalan-2.6.0.jar"/>
   <pathelement location="${repo}/org/scannotation/scannotation/1.0.2/scannotation-1.0.2.jar"/>
   <pathelement location="${repo}/org/codehaus/jettison/jettison/1.1/jettison-1.1.jar"/>
   <pathelement location="/usr/share/java/ant.jar"/>
   </path>

 <taskdef name="hibernatetool" 

         classname="org.hibernate.tool.ant.HibernateToolTask" 

         classpathref="toolslib" />
     <target name="tool"  description="runs the hibernate tool" >

       <delete dir="target/schemagen" />
       <mkdir  dir="target/schemagen" />

       <echo message="${tool.classpath}" />

       <copy todir="target/classes/META-INF">
	 <fileset dir="src/main/resources/META-INF"/>
       </copy>
       <hibernatetool  destdir="target/schemagen">
	 <jpaconfiguration persistenceunit="production"/>
         <hbm2ddl export="false" update="false" drop="false" create="true" 
            outputfilename="candlepin-proxy.sql" delimiter=";" format="false" haltonerror="true" />
          <classpath> <path location="target/classes"/></classpath>
       </hibernatetool>
     </target>
</project>

